[Window]
WS_OVERLAPPED|0x00000000|The window is an overlapped window. An overlapped window has a title bar and a border. Same as the WS_TILED style.
WS_MAXIMIZEBOX|0x00010000|The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified. 
WS_TABSTOP|0x00010000|The window is a control that can receive the keyboard focus when the user presses the TAB key. Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.\n\nYou can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function. For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
WS_MINIMIZEBOX|0x00020000|The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.
WS_GROUP|0x00020000|The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style. The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.\n\nYou can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
WS_THICKFRAME|0x00040000|The window has a sizing border. Same as the WS_SIZEBOX style.
WS_SYSMENU|0x00080000|The window has a window menu on its title bar. The WS_CAPTION style must also be specified.
WS_HSCROLL|0x00100000|The window has a horizontal scroll bar.
WS_VSCROLL|0x00200000|The window has a vertical scroll bar.
WS_DLGFRAME|0x00400000|The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.
WS_BORDER|0x00800000|The window has a thin-line border.
WS_MAXIMIZE|0x01000000|The window is initially maximized.
WS_CLIPCHILDREN|0x02000000|Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.
WS_CLIPSIBLINGS|0x04000000|Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated. If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
WS_DISABLED|0x08000000|The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.
WS_VISIBLE|0x10000000|The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.
WS_MINIMIZE|0x20000000|The window is initially minimized. Same as the WS_ICONIC style.
WS_CHILD|0x40000000|The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.
WS_POPUP|0x80000000|The windows is a pop-up window. This style cannot be used with the WS_CHILD style.

[WindowEx]
WS_EX_LEFT|0x00000000|The window has generic left-aligned properties. This is the default.
WS_EX_LTRREADING|0x00000000|The window text is displayed using left-to-right reading-order properties. This is the default.
WS_EX_RIGHTSCROLLBAR|0x00000000|The vertical scroll bar (if present) is to the right of the client area. This is the default.
WS_EX_DLGMODALFRAME|0x00000001|The window has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
WS_EX_NOPARENTNOTIFY|0x00000004|The child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
WS_EX_TOPMOST|0x00000008|The window should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. 
WS_EX_ACCEPTFILES|0x00000010|The window accepts drag-drop files.
WS_EX_TRANSPARENT|0x00000020|The window should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted.\n\nTo achieve transparency without these restrictions, use the SetWindowRgn function.
WS_EX_MDICHILD|0x00000040|The window is a MDI child window.
WS_EX_TOOLWINDOW|0x00000080|The window is intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE.
WS_EX_WINDOWEDGE|0x00000100|The window has a border with a raised edge.
WS_EX_CLIENTEDGE|0x00000200|The window has a border with a sunken edge.
WS_EX_CONTEXTHELP|0x00000400|The title bar of the window includes a question mark. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.\n\nWS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
WS_EX_RIGHT|0x00001000|The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.\n\nUsing the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
WS_EX_RTLREADING|0x00002000|If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties. For other languages, the style is ignored.
WS_EX_LEFTSCROLLBAR|0x00004000|If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored.
WS_EX_CONTROLPARENT|0x00010000|The window itself contains child windows that should take part in dialog box navigation. If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
WS_EX_STATICEDGE|0x00020000|The window has a three-dimensional border style intended to be used for items that do not accept user input.
WS_EX_APPWINDOW|0x00040000|Forces a top-level window onto the taskbar when the window is visible. 
WS_EX_LAYERED|0x00080000| The window is a layered window. This style cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.\n\nWindows 8: The WS_EX_LAYERED style is supported for top-level windows and child windows. Previous Windows versions support WS_EX_LAYERED only for top-level windows.
WS_EX_NOINHERITLAYOUT|0x00100000|The window does not pass its window layout to its child windows.
WS_EX_NOREDIRECTIONBITMAP|0x00200000|The window does not render to a redirection surface. This is for windows that do not have visible content or that use mechanisms other than surfaces to provide their visual.
WS_EX_LAYOUTRTL|0x00400000|If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the horizontal origin of the window is on the right edge. Increasing horizontal values advance to the left. 
WS_EX_COMPOSITED|0x02000000|Paints all descendants of a window in bottom-to-top painting order using double-buffering. For more information, see Remarks. This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.
WS_EX_NOACTIVATE|0x08000000|A top-level window created with this style does not become the foreground window when the user clicks it. The system does not bring this window to the foreground when the user minimizes or closes the foreground window.\n\nTo activate the window, use the SetActiveWindow or SetForegroundWindow function.\n\nThe window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.

[Static]
SS_LEFT|0x00000000|A simple rectangle and left-aligns the text in the rectangle. The text is formatted before it is displayed. Words that extend past the end of a line are automatically wrapped to the beginning of the next left-aligned line. Words that are longer than the width of the control are truncated.
SS_CENTER|0x00000001|A simple rectangle and centers the text in the rectangle. The text is formatted before it is displayed. Words that extend past the end of a line are automatically wrapped to the beginning of the next centered line. Words that are longer than the width of the control are truncated.
SS_RIGHT|0x00000002|A simple rectangle and right-aligns the text in the rectangle. The text is formatted before it is displayed. Words that extend past the end of a line are automatically wrapped to the beginning of the next right-aligned line. Words that are longer than the width of the control are truncated.
SS_ICON|0x00000003|An icon to be displayed in the dialog box. If the control is created as part of a dialog box, the text is the name of an icon (not a filename) defined elsewhere in the resource file. If the control is created via CreateWindow or a related function, the text is the name of an icon (not a filename) defined in the resource file associated with the module specified by the hInstance parameter to CreateWindow.\n\nThe icon can be an animated cursor.\n\nThe style ignores the CreateWindow parameters nWidth and nHeight; the control automatically sizes itself to accommodate the icon. As it uses the LoadIcon function, the SS_ICON style can load only icons of dimensions SM_CXICON and SM_CYICON. This restriction can be bypassed by using the SS_REALSIZEIMAGE style in addition to SS_ICON.\n\nIf an icon cannot be loaded through LoadIcon, an attempt is made to load the specified resource as a cursor using LoadCursor. If that too fails, an attempt is made to load from the device driver using LoadImage.
SS_BLACKRECT|0x00000004|A rectangle filled with the current window frame color. This color is black in the default color scheme.
SS_GRAYRECT|0x00000005|A rectangle filled with the current screen background color. This color is gray in the default color scheme.
SS_WHITERECT|0x00000006|A rectangle filled with the current window background color. This color is white in the default color scheme.
SS_BLACKFRAME|0x00000007|A box with a frame drawn in the same color as the window frames. This color is black in the default color scheme.
SS_GRAYFRAME|0x00000008|A box with a frame drawn with the same color as the screen background (desktop). This color is gray in the default color scheme.
SS_WHITEFRAME|0x00000009|A box with a frame drawn with the same color as the window background. This color is white in the default color scheme.
SS_USERITEM|0x0000000A|Specifies a user-defined item.
SS_SIMPLE|0x0000000B|A simple rectangle and displays a single line of left-aligned text in the rectangle. The text line cannot be shortened or altered in any way. Also, if the control is disabled, the control does not gray its text.
SS_LEFTNOWORDWRAP|0x0000000C|A simple rectangle and left-aligns the text in the rectangle. Tabs are expanded, but words are not wrapped. Text that extends past the end of a line is clipped.
SS_OWNERDRAW|0x0000000D|The owner of the static control is responsible for drawing the control. The owner window receives a WM_DRAWITEM message whenever the control needs to be drawn.
SS_BITMAP|0x0000000E|A bitmap is to be displayed in the static control. The text is the name of a bitmap (not a filename) defined elsewhere in the resource file. The style ignores the nWidth and nHeight parameters; the control automatically sizes itself to accommodate the bitmap.
SS_ENHMETAFILE|0x0000000F|An enhanced metafile is to be displayed in the static control. The text is the name of a metafile. An enhanced metafile static control has a fixed size; the metafile is scaled to fit the static control's client area.
SS_ETCHEDHORZ|0x00000010|Draws the top and bottom edges of the static control using the EDGE_ETCHED edge style. For more information, see the DrawEdge function.
SS_REALSIZECONTROL|0x00000040|Adjusts the bitmap to fit the size of the static control. For example, changing the locale can change the system font, and thus controls might be resized. If a static control had a bitmap, the bitmap would no longer fit the control. This style bit dictates automatic redimensioning of bitmaps to fit their controls.\n\nIf SS_CENTERIMAGE is specified, the bitmap or icon is centered (and clipped if needed). If SS_CENTERIMAGE is not specified, the bitmap or icon is stretched or shrunk.\n\nNote that the redimensioning in the two axes are independent, and the result may have a changed aspect ratio.\n\nCompare with SS_REALSIZEIMAGE.
SS_NOPREFIX|0x00000080|Prevents interpretation of any ampersand (&) characters in the control's text as accelerator prefix characters. These are displayed with the ampersand removed and the next character in the string underlined. This static control style may be included with any of the defined static controls. You can combine SS_NOPREFIX with other styles. This can be useful when filenames or other strings that may contain an ampersand (&) must be displayed in a static control in a dialog box.
SS_NOTIFY|0x00000100|Sends the parent window STN_CLICKED, STN_DBLCLK, STN_DISABLE, and STN_ENABLE notification codes when the user clicks or double-clicks the control.
SS_CENTERIMAGE|0x00000200|A bitmap is centered in the static control that contains it. The control is not resized, so that a bitmap too large for the control will be clipped. If the static control contains a single line of text, the text is centered vertically in the client area of the control.
SS_RIGHTJUST|0x00000400|The lower right corner of a static control with the SS_BITMAP or SS_ICON style is to remain fixed when the control is resized. Only the top and left sides are adjusted to accommodate a new bitmap or icon.
SS_REALSIZEIMAGE|0x00000800|Specifies that the actual resource width is used and the icon is loaded using LoadImage. SS_REALSIZEIMAGE is always used in conjunction with SS_ICON.\n\nSS_REALSIZEIMAGE uses LoadImage, overriding the process normally followed under SS_ICON. It does not load cursors; if LoadImage fails, no further attempts to load are made. It uses the actual resource width. The static control is resized accordingly, but the icon remains aligned to the originally specified left and top edges of the control.\n\nNote that if SS_CENTERIMAGE is also specified, the icon is centered within the control's space, which was specified using the CreateWindow parameters nWidth and nHeight.\n\nCompare with SS_REALSIZECONTROL.
SS_SUNKEN|0x00001000|Draws a half-sunken border around a static control.
SS_EDITCONTROL|0x00002000|The static control duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as with an edit control, and the function does not display a partially visible last line.
SS_ENDELLIPSIS|0x00004000|If the end of a string does not fit in the rectangle, it is truncated and ellipses are added. If a word that is not at the end of the string goes beyond the limits of the rectangle, it is truncated without ellipses. Using this style will force the control's text to be on one line with no word wrap. Compare with SS_PATHELLIPSIS and SS_WORDELLIPSIS.
SS_PATHELLIPSIS|0x00008000|Replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\) characters, SS_PATHELLIPSIS preserves as much as possible of the text after the last backslash. Using this style will force the control's text to be on one line with no word wrap. Compare with SS_ENDELLIPSIS and SS_WORDELLIPSIS.
SS_WORDELLIPSIS|0x0000C000|Truncates any word that does not fit in the rectangle and adds ellipses. Using this style will force the control's text to be on one line with no word wrap.

[Button]
BS_PUSHBUTTON|0x00000000|Creates a push button that posts a WM_COMMAND message to the owner window when the user selects the button.
BS_TEXT|0x00000000|Specifies that the button displays text.
BS_DEFPUSHBUTTON|0x00000001|Creates a push button that behaves like a BS_PUSHBUTTON style button, but has a distinct appearance. If the button is in a dialog box, the user can select the button by pressing the ENTER key, even when the button does not have the input focus. This style is useful for enabling the user to quickly select the most likely (default) option.
BS_CHECKBOX|0x00000002|Creates a small, empty check box with text. By default, the text is displayed to the right of the check box. To display the text to the left of the check box, combine this flag with the BS_LEFTTEXT style (or with the equivalent BS_RIGHTBUTTON style).
BS_AUTOCHECKBOX|0x00000003|Creates a button that is the same as a check box, except that the check state automatically toggles between checked and cleared each time the user selects the check box.
BS_RADIOBUTTON|0x00000004|Creates a small circle with text. By default, the text is displayed to the right of the circle. To display the text to the left of the circle, combine this flag with the BS_LEFTTEXT style (or with the equivalent BS_RIGHTBUTTON style). Use radio buttons for groups of related, but mutually exclusive choices.
BS_3STATE|0x00000005|Creates a button that is the same as a check box, except that the box can be grayed as well as checked or cleared. Use the grayed state to show that the state of the check box is not determined.
BS_AUTO3STATE|0x00000006|Creates a button that is the same as a three-state check box, except that the box changes its state when the user selects it. The state cycles through checked, indeterminate, and cleared.
BS_GROUPBOX|0x00000007|Creates a rectangle in which other controls can be grouped. Any text associated with this style is displayed in the rectangle's upper left corner.
BS_USERBUTTON|0x00000008|Obsolete, but provided for compatibility with 16-bit versions of Windows. Applications should use BS_OWNERDRAW instead.
BS_AUTORADIOBUTTON|0x00000009|Creates a button that is the same as a radio button, except that when the user selects it, the system automatically sets the button's check state to checked and automatically sets the check state for all other buttons in the same group to cleared.
BS_OWNERDRAW|0x0000000B|Creates an owner-drawn button. The owner window receives a WM_DRAWITEM message when a visual aspect of the button has changed. Do not combine the BS_OWNERDRAW style with any other button styles.
BS_SPLITBUTTON|0x0000000C|Creates a split button. A split button has a drop down arrow.
BS_DEFSPLITBUTTON|0x0000000D|Creates a split button that behaves like a BS_PUSHBUTTON style button, but also has a distinctive appearance. If the split button is in a dialog box, the user can select the split button by pressing the ENTER key, even when the split button does not have the input focus. This style is useful for enabling the user to quickly select the most likely (default) option.
BS_COMMANDLINK|0x0000000E|Creates a command link button that behaves like a BS_PUSHBUTTON style button, but the command link button has a green arrow on the left pointing to the button text. A caption for the button text can be set by sending the BCM_SETNOTE message to the button.
BS_DEFCOMMANDLINK|0x0000000F|Creates a command link button that behaves like a BS_PUSHBUTTON style button. If the button is in a dialog box, the user can select the command link button by pressing the ENTER key, even when the command link button does not have the input focus. This style is useful for enabling the user to quickly select the most likely (default) option.
BS_LEFTTEXT|0x00000020|Places text on the left side of the radio button or check box when combined with a radio button or check box style. Same as the BS_RIGHTBUTTON style.
BS_ICON|0x00000040|Specifies that the button displays an icon. See the Remarks section for its interaction with BS_BITMAP.
BS_BITMAP|0x00000080|Specifies that the button displays a bitmap. See the Remarks section for its interaction with BS_ICON.
BS_LEFT|0x00000100|Left-justifies the text in the button rectangle. However, if the button is a check box or radio button that does not have the BS_RIGHTBUTTON style, the text is left justified on the right side of the check box or radio button.
BS_RIGHT|0x00000200|Right-justifies text in the button rectangle. However, if the button is a check box or radio button that does not have the BS_RIGHTBUTTON style, the text is right justified on the right side of the check box or radio button.
BS_CENTER|0x00000300|Centers text horizontally in the button rectangle.
BS_TOP|0x00000400|Places text at the top of the button rectangle.
BS_BOTTOM|0x00000800|Places text at the bottom of the button rectangle.
BS_VCENTER|0x00000C00|Places text in the middle (vertically) of the button rectangle.
BS_PUSHLIKE|0x00001000|Makes a button (such as a check box, three-state check box, or radio button) look and act like a push button. The button looks raised when it isn't pushed or checked, and sunken when it is pushed or checked.
BS_MULTILINE|0x00002000|Wraps the button text to multiple lines if the text string is too long to fit on a single line in the button rectangle.
BS_NOTIFY|0x00004000|Enables a button to send BN_KILLFOCUS and BN_SETFOCUS notification codes to its parent window.\n\nNote that buttons send the BN_CLICKED notification code regardless of whether it has this style. To get BN_DBLCLK notification codes, the button must have the BS_RADIOBUTTON or BS_OWNERDRAW style.
BS_FLAT|0x00008000|Specifies that the button is two-dimensional; it does not use the default shading to create a 3-D image. 

[Edit]
ES_LEFT|0x00000000|Aligns text with the left margin.
ES_CENTER|0x00000001|Centers text in a single-line or multiline edit control.
ES_RIGHT|0x00000002|Right-aligns text in a single-line or multiline edit control.
ES_MULTILINE|0x00000004|Designates a multiline edit control. The default is single-line edit control.\n\nWhen the multiline edit control is in a dialog box, the default response to pressing the ENTER key is to activate the default button. To use the ENTER key as a carriage return, use the ES_WANTRETURN style.\n\nWhen the multiline edit control is not in a dialog box and the ES_AUTOVSCROLL style is specified, the edit control shows as many lines as possible and scrolls vertically when the user presses the ENTER key. If you do not specify ES_AUTOVSCROLL, the edit control shows as many lines as possible and beeps if the user presses the ENTER key when no more lines can be displayed.\n\nIf you specify the ES_AUTOHSCROLL style, the multiline edit control automatically scrolls horizontally when the caret goes past the right edge of the control. To start a new line, the user must press the ENTER key. If you do not specify ES_AUTOHSCROLL, the control automatically wraps words to the beginning of the next line when necessary. A new line is also started if the user presses the ENTER key. The window size determines the position of the Wordwrap. If the window size changes, the Wordwrapping position changes and the text is redisplayed.\n\nMultiline edit controls can have scroll bars. An edit control with scroll bars processes its own scroll bar messages. Note that edit controls without scroll bars scroll as described in the previous paragraphs and process any scroll messages sent by the parent window.
ES_UPPERCASE|0x00000008|Converts all characters to uppercase as they are typed into the edit control.\n\nTo change this style after the control has been created, use SetWindowLong.
ES_LOWERCASE|0x00000010|Converts all characters to lowercase as they are typed into the edit control.\n\nTo change this style after the control has been created, use SetWindowLong.
ES_PASSWORD|0x00000020|Displays an asterisk (*) for each character typed into the edit control. This style is valid only for single-line edit controls.\n\nTo change the characters that is displayed, or set or clear this style, use the EM_SETPASSWORDCHAR message. 
ES_AUTOVSCROLL|0x00000040|Automatically scrolls text up one page when the user presses the ENTER key on the last line.
ES_AUTOHSCROLL|0x00000080|Automatically scrolls text to the right by 10 characters when the user types a character at the end of the line. When the user presses the ENTER key, the control scrolls all text back to position zero.
ES_NOHIDESEL|0x00000100|Negates the default behavior for an edit control. The default behavior hides the selection when the control loses the input focus and inverts the selection when the control receives the input focus. If you specify ES_NOHIDESEL, the selected text is inverted, even if the control does not have the focus.
ES_OEMCONVERT|0x00000400|Converts text entered in the edit control. The text is converted from the Windows character set to the OEM character set and then back to the Windows character set. This ensures proper character conversion when the application calls the CharToOem function to convert a Windows string in the edit control to OEM characters. This style is most useful for edit controls that contain file names that will be used on file systems that do not support Unicode.\n\nTo change this style after the control has been created, use SetWindowLong. 
ES_READONLY|0x00000800|Prevents the user from typing or editing text in the edit control.\n\nTo change this style after the control has been created, use the EM_SETREADONLY message. 
ES_WANTRETURN|0x00001000|Specifies that a carriage return be inserted when the user presses the ENTER key while entering text into a multiline edit control in a dialog box. If you do not specify this style, pressing the ENTER key has the same effect as pressing the dialog box's default push button. This style has no effect on a single-line edit control.\n\nTo change this style after the control has been created, use SetWindowLong.
ES_NUMBER|0x00002000|Allows only digits to be entered into the edit control. Note that, even with this set, it is still possible to paste non-digits into the edit control.\n\nTo change this style after the control has been created, use SetWindowLong.\n\nTo translate text that was entered into the edit control to an integer value, use the GetDlgItemInt function. To set the text of the edit control to the string representation of a specified integer, use the SetDlgItemInt function.

[ComboBox]
CBS_SIMPLE|0x00000001|Displays the list box at all times. The current selection in the list box is displayed in the edit control.
CBS_DROPDOWN|0x00000002|Similar to CBS_SIMPLE, except that the list box is not displayed unless the user selects an icon next to the edit control.
CBS_DROPDOWNLIST|0x00000003|Similar to CBS_DROPDOWN, except that the edit control is replaced by a static text item that displays the current selection in the list box.
CBS_OWNERDRAWFIXED|0x00000010|Specifies that the owner of the list box is responsible for drawing its contents and that the items in the list box are all the same height. The owner window receives a WM_MEASUREITEM message when the combo box is created and a WM_DRAWITEM message when a visual aspect of the combo box has changed.
CBS_OWNERDRAWVARIABLE|0x00000020|Specifies that the owner of the list box is responsible for drawing its contents and that the items in the list box are variable in height. The owner window receives a WM_MEASUREITEM message for each item in the combo box when you create the combo box and a WM_DRAWITEM message when a visual aspect of the combo box has changed.
CBS_AUTOHSCROLL|0x00000040|Automatically scrolls the text in an edit control to the right when the user types a character at the end of the line. If this style is not set, only text that fits within the rectangular boundary is allowed.
CBS_OEMCONVERT|0x00000080|Converts text entered in the combo box edit control from the Windows character set to the OEM character set and then back to the Windows character set. This ensures proper character conversion when the application calls the CharToOem function to convert a Windows string in the combo box to OEM characters. This style is most useful for combo boxes that contain file names and applies only to combo boxes created with the CBS_SIMPLE or CBS_DROPDOWN style.
CBS_SORT|0x00000100|Automatically sorts strings added to the list box.
CBS_HASSTRINGS|0x00000200|Specifies that an owner-drawn combo box contains items consisting of strings. The combo box maintains the memory and address for the strings so the application can use the CB_GETLBTEXT message to retrieve the text for a particular item.\n\nFor accessibility issues, see Exposing Owner-Drawn Combo Box Items 
CBS_NOINTEGRALHEIGHT|0x00000400|Specifies that the size of the combo box is exactly the size specified by the application when it created the combo box. Normally, the system sizes a combo box so that it does not display partial items.
CBS_DISABLENOSCROLL|0x00000800|Shows a disabled vertical scroll bar in the list box when the box does not contain enough items to scroll. Without this style, the scroll bar is hidden when the list box does not contain enough items.
CBS_UPPERCASE|0x00001000|Converts to uppercase all text in both the selection field and the list.
CBS_LOWERCASE|0x00002000|Converts to lowercase all text in both the selection field and the list. 

[ListBox]
LBS_NOTIFY|0x00000001|Causes the list box to send a notification code to the parent window whenever the user clicks a list box item (LBN_SELCHANGE), double-clicks an item (LBN_DBLCLK), or cancels the selection (LBN_SELCANCEL).
LBS_SORT|0x00000002|Sorts strings in the list box alphabetically.
LBS_NOREDRAW|0x00000004|Specifies that the list box's appearance is not updated when changes are made.\n\nTo change the redraw state of the control, use the WM_SETREDRAW message.
LBS_MULTIPLESEL|0x00000008|Turns string selection on or off each time the user clicks or double-clicks a string in the list box. The user can select any number of strings.
LBS_OWNERDRAWFIXED|0x00000010|Specifies that the owner of the list box is responsible for drawing its contents and that the items in the list box are the same height. The owner window receives a WM_MEASUREITEM message when the list box is created and a WM_DRAWITEM message when a visual aspect of the list box has changed.
LBS_OWNERDRAWVARIABLE|0x00000020|Specifies that the owner of the list box is responsible for drawing its contents and that the items in the list box are variable in height. The owner window receives a WM_MEASUREITEM message for each item in the box when the list box is created and a WM_DRAWITEM message when a visual aspect of the list box has changed.\n\nThis style causes the LBS_NOINTEGRALHEIGHT style to be enabled.\n\nThis style is ignored if the LBS_MULTICOLUMN style is specified. 
LBS_HASSTRINGS|0x00000040|Specifies that a list box contains items consisting of strings. The list box maintains the memory and addresses for the strings so that the application can use the LB_GETTEXT message to retrieve the text for a particular item. By default, all list boxes except owner-drawn list boxes have this style. You can create an owner-drawn list box either with or without this style.\n\nFor owner-drawn list boxes without this style, the LB_GETTEXT message retrieves the value associated with an item (the item data). 
LBS_USETABSTOPS|0x00000080|Enables a list box to recognize and expand tab characters when drawing its strings. You can use the LB_SETTABSTOPS message to specify tab stop positions. The default tab positions are 32 dialog template units apart. Dialog template units are the device-independent units used in dialog box templates. To convert measurements from dialog template units to screen units (pixels), use the MapDialogRect function.
LBS_NOINTEGRALHEIGHT|0x00000100|Specifies that the size of the list box is exactly the size specified by the application when it created the list box. Normally, the system sizes a list box so that the list box does not display partial items.\n\nFor list boxes with the LBS_OWNERDRAWVARIABLE style, the LBS_NOINTEGRALHEIGHT style is always enforced.
LBS_MULTICOLUMN|0x00000200|Specifies a multi-column list box that is scrolled horizontally. The list box automatically calculates the width of the columns, or an application can set the width by using the LB_SETCOLUMNWIDTH message. If a list box has the LBS_OWNERDRAWFIXED style, an application can set the width when the list box sends the WM_MEASUREITEM message.\n\nA list box with the LBS_MULTICOLUMN style cannot scroll vertically - it ignores any WM_VSCROLL messages it receives.\n\nThe LBS_MULTICOLUMN and LBS_OWNERDRAWVARIABLE styles cannot be combined. If both are specified, LBS_OWNERDRAWVARIABLE is ignored.
LBS_WANTKEYBOARDINPUT|0x00000400|Specifies that the owner of the list box receives WM_VKEYTOITEM messages whenever the user presses a key and the list box has the input focus. This enables an application to perform special processing on the keyboard input.
LBS_EXTENDEDSEL|0x00000800|Allows multiple items to be selected by using the SHIFT key and the mouse or special key combinations.
LBS_DISABLENOSCROLL|0x00001000|Shows a disabled horizontal or vertical scroll bar when the list box does not contain enough items to scroll. If you do not specify this style, the scroll bar is hidden when the list box does not contain enough items. This style must be used with the WS_VSCROLL or WS_HSCROLL style.
LBS_NODATA|0x00002000|Specifies a no-data list box. Specify this style when the count of items in the list box will exceed one thousand. A no-data list box must also have the LBS_OWNERDRAWFIXED style, but must not have the LBS_SORT or LBS_HASSTRINGS style.\n\nA no-data list box resembles an owner-drawn list box except that it contains no string or bitmap data for an item. Commands to add, insert, or delete an item always ignore any specified item data; requests to find a string within the list box always fail. The system sends the WM_DRAWITEM message to the owner window when an item must be drawn. The itemID member of the DRAWITEMSTRUCT structure passed with the WM_DRAWITEM message specifies the line number of the item to be drawn. A no-data list box does not send a WM_DELETEITEM message.
LBS_NOSEL|0x00004000|Specifies that the list box contains items that can be viewed but not selected. 
LBS_COMBOBOX|0x00008000|Notifies a list box that it is part of a combo box. This allows coordination between the two controls so that they present a unified UI. The combo box itself must set this style. If the style is set by anything but the combo box, the list box will regard itself incorrectly as a child of a combo box and a failure will result.

[SysListView32]
LVS_ICON|0x00000000|This style specifies icon view. 
LVS_ALIGNTOP|0x00000000|Items are aligned with the top of the list-view control in icon and small icon view. 
LVS_REPORT|0x00000001|This style specifies report view. When using the LVS_REPORT style with a list-view control, the first column is always left-aligned. You cannot use LVCFMT_RIGHT to change this alignment. See LVCOLUMN for further information on column alignment.
LVS_SMALLICON|0x00000002|This style specifies small icon view.
LVS_LIST|0x00000003|This style specifies list view.
LVS_SINGLESEL|0x00000004|Only one item at a time can be selected. By default, multiple items may be selected.
LVS_SHOWSELALWAYS|0x00000008|The selection, if any, is always shown, even if the control does not have the focus.
LVS_SORTASCENDING|0x00000010|Item indexes are sorted based on item text in ascending order.
LVS_SORTDESCENDING|0x00000020|Item indexes are sorted based on item text in descending order.
LVS_SHAREIMAGELISTS|0x00000040|The image list will not be deleted when the control is destroyed. This style enables the use of the same image lists with multiple list-view controls.
LVS_NOLABELWRAP|0x00000080|Item text is displayed on a single line in icon view. By default, item text may wrap in icon view.
LVS_AUTOARRANGE|0x00000100|Icons are automatically kept arranged in icon and small icon view.
LVS_EDITLABELS|0x00000200|Item text can be edited in place. The parent window must process the LVN_ENDLABELEDIT notification code.
LVS_OWNERDATA|0x00001000|This style specifies a virtual list-view control. For more information about this list control style, see About List-View Controls.
LVS_NOSCROLL|0x00002000|Scrolling is disabled. All items must be within the client area. This style is not compatible with the LVS_LIST or LVS_REPORT styles. See Knowledge Base Article Q137520 for further discussion.
LVS_ALIGNLEFT|0x00000800|Items are left-aligned in icon and small icon view.
LVS_OWNERDRAWFIXED|0x00000400|The owner window can paint items in report view. The list-view control sends a WM_DRAWITEM message to paint each item; it does not send separate messages for each subitem. The iItemData member of the DRAWITEMSTRUCT structure contains the item data for the specified list-view item.
LVS_NOCOLUMNHEADER|0x00004000|Column headers are not displayed in report view. By default, columns have headers in report view.
LVS_NOSORTHEADER|0x00008000|Column headers do not work like buttons. This style can be used if clicking a column header in report view does not carry out an action, such as sorting.

[SysListView32Ex]
LVS_EX_GRIDLINES|0x00000001|Displays gridlines around items and subitems. This style is available only in conjunction with the LVS_REPORT style.
LVS_EX_SUBITEMIMAGES|0x00000002|Allows images to be displayed for subitems. This style is available only in conjunction with the LVS_REPORT style.
LVS_EX_CHECKBOXES|0x00000004|Enables check boxes for items in a list-view control. Check boxes are visible and functional with all list view modes except the tile view mode introduced in ComCtl32.dll version 6. Clicking a checkbox in tile view mode only selects the item; the state does not change.\n\nYou can obtain the state of the check box for a given item with ListView_GetCheckState. To set the check state, use ListView_SetCheckState. If this style is set, the list-view control automatically toggles the check state when the user clicks the check box or presses the space bar.
LVS_EX_TRACKSELECT|0x00000008|Enables hot-track selection in a list-view control. Hot track selection means that an item is automatically selected when the cursor remains over the item for a certain period of time. The delay can be changed from the default system setting with a LVM_SETHOVERTIME message. This style applies to all styles of list-view control. You can check whether hot-track selection is enabled by calling SystemParametersInfo.
LVS_EX_HEADERDRAGDROP|0x00000010|Enables drag-and-drop reordering of columns in a list-view control. This style is only available to list-view controls that use the LVS_REPORT style.
LVS_EX_FULLROWSELECT|0x00000020|When an item is selected, the item and all its subitems are highlighted. This style is available only in conjunction with the LVS_REPORT style.
LVS_EX_ONECLICKACTIVATE|0x00000040|The list-view control sends an LVN_ITEMACTIVATE notification code to the parent window when the user clicks an item. This style also enables hot tracking in the list-view control. Hot tracking means that when the cursor moves over an item, it is highlighted but not selected. See the Extended List-View Styles Remarks section for a discussion of item activation.
LVS_EX_TWOCLICKACTIVATE|0x00000080|The list-view control sends an LVN_ITEMACTIVATE notification code to the parent window when the user double-clicks an item. This style also enables hot tracking in the list-view control. Hot tracking means that when the cursor moves over an item, it is highlighted but not selected. See the Extended List-View Styles Remarks section for a discussion of item activation.
LVS_EX_FLATSB|0x00000100|Enables flat scroll bars in the list view. If you need more control over the appearance of the list view's scroll bars, you should manipulate the list view's scroll bars directly using the Flat Scroll Bar APIs. If the system metrics change, you are responsible for adjusting the scroll bar metrics with FlatSB_SetScrollProp. See Flat Scroll Bars for further details.
LVS_EX_REGIONAL|0x00000200|Not supported on Windows Vista and later. Sets the list view window region to include only the item icons and text using SetWindowRgn. Any area that is not part of an item is excluded from the window region. This style is only available to list-view controls that use the LVS_ICON style.
LVS_EX_INFOTIP|0x00000400|When a list-view control uses the LVS_EX_INFOTIP style, the LVN_GETINFOTIP notification code is sent to the parent window before displaying an item's tooltip.
LVS_EX_UNDERLINEHOT|0x00000800|Causes those hot items that may be activated to be displayed with underlined text. This style requires that LVS_EX_ONECLICKACTIVATE or LVS_EX_TWOCLICKACTIVATE also be set. See the Extended List-View Styles Remarks section for a discussion of item activation.
LVS_EX_UNDERLINECOLD|0x00001000|Causes those non-hot items that may be activated to be displayed with underlined text. This style requires that LVS_EX_TWOCLICKACTIVATE be set also. See the Extended List-View Styles Remarks section for a discussion of item activation.
LVS_EX_MULTIWORKAREAS|0x00002000|If the list-view control has the LVS_AUTOARRANGE style, the control will not autoarrange its icons until one or more work areas are defined (see LVM_SETWORKAREAS). To be effective, this style must be set before any work areas are defined and any items have been added to the control.
LVS_EX_LABELTIP|0x00004000|If a partially hidden label in any list view mode lacks tooltip text, the list-view control will unfold the label. If this style is not set, the list-view control will unfold partly hidden labels only for the large icon mode.
LVS_EX_BORDERSELECT|0x00008000|Changes border color when an item is selected, instead of highlighting the item.
LVS_EX_DOUBLEBUFFER|0x00010000|Paints via double-buffering, which reduces flicker. This extended style also enables alpha-blended marquee selection on systems where it is supported.
LVS_EX_HIDELABELS|0x00020000|Hides the labels in icon and small icon view.
LVS_EX_SINGLEROW|0x00040000|Not used.
LVS_EX_SNAPTOGRID|0x00080000|In icon view, icons automatically snap into a grid.
LVS_EX_SIMPLESELECT|0x00100000|In icon view, moves the state image of the control to the top right of the large icon rendering. In views other than icon view there is no change. When the user changes the state by using the space bar, all selected items cycle over, not the item with the focus.
LVS_EX_JUSTIFYCOLUMNS|0x00200000|Icons are lined up in columns that use up the whole view.
LVS_EX_TRANSPARENTBKGND|0x00400000|Background is painted by the parent via WM_PRINTCLIENT.
LVS_EX_TRANSPARENTSHADOWTEXT|0x00800000|Enable shadow text on transparent backgrounds only.
LVS_EX_AUTOAUTOARRANGE|0x01000000|Automatically arrange icons if no icon positions have been set (Similar to LVS_AUTOARRANGE).
LVS_EX_HEADERINALLVIEWS|0x02000000|Show column headers in all view modes.
LVS_EX_AUTOCHECKSELECT|0x08000000|Automatically select check boxes on single click.
LVS_EX_AUTOSIZECOLUMNS|0x10000000|Automatically size listview columns.
LVS_EX_COLUMNSNAPPOINTS|0x40000000|Snap to minimum column width when the user resizes a column.
LVS_EX_COLUMNOVERFLOW|0x80000000|Indicates that an overflow button should be displayed in icon/tile view if there is not enough client width to display the complete set of header items. The list-view control sends the LVN_COLUMNOVERFLOWCLICK notification when the overflow button is clicked. This flag is only valid when LVS_EX_HEADERINALLVIEWS is also specified.

[SysTreeView32]
TVS_HASBUTTONS|0x00000001|Displays plus (+) and minus (-) buttons next to parent items. The user clicks the buttons to expand or collapse a parent item's list of child items. To include buttons with items at the root of the tree view, TVS_LINESATROOT must also be specified.
TVS_HASLINES|0x00000002|Uses lines to show the hierarchy of items.
TVS_LINESATROOT|0x00000004|Uses lines to link items at the root of the tree-view control. This value is ignored if TVS_HASLINES is not also specified.
TVS_EDITLABELS|0x00000008|Allows the user to edit the labels of tree-view items.
TVS_DISABLEDRAGDROP|0x00000010|Prevents the tree-view control from sending TVN_BEGINDRAG notification codes.
TVS_SHOWSELALWAYS|0x00000020|Causes a selected item to remain selected when the tree-view control loses focus.
TVS_RTLREADING|0x00000040|Causes text to be displayed from right-to-left (RTL). Usually, windows display text left-to-right (LTR). Windows can be mirrored to display languages such as Hebrew or Arabic that read RTL. Typically, tree-view text is displayed in the same direction as the text in its parent window. If TVS_RTLREADING is set, tree-view text reads in the opposite direction from the text in the parent window.
TVS_NOTOOLTIPS|0x00000080|Disables tooltips.
TVS_CHECKBOXES|0x00000100|Enables check boxes for items in a tree-view control. A check box is displayed only if an image is associated with the item. When set to this style, the control effectively uses DrawFrameControl to create and set a state image list containing two images. State image 1 is the unchecked box and state image 2 is the checked box. Setting the state image to zero removes the check box altogether. For more information, see Working with state image indexes.\n\nVersion 5.80. Displays a check box even if no image is associated with the item.\n\nOnce a tree-view control is created with this style, the style cannot be removed. Instead, you must destroy the control and create a new one in its place. Destroying the tree-view control does not destroy the check box state image list. You must destroy it explicitly. Get the handle to the state image list by sending the tree-view control a TVM_GETIMAGELIST message. Then destroy the image list with ImageList_Destroy.\n\nIf you want to use this style, you must set the TVS_CHECKBOXES style with SetWindowLong after you create the treeview control, and before you populate the tree. Otherwise, the checkboxes might appear unchecked, depending on timing issues.
TVS_TRACKSELECT|0x00000200|Enables hot tracking in a tree-view control.
TVS_SINGLEEXPAND|0x00000400|Causes the item being selected to expand and the item being unselected to collapse upon selection in the tree view. If the user holds down the CTRL key while selecting an item, the item being unselected will not be collapsed.
TVS_INFOTIP|0x00000800|Obtains tooltip information by sending the TVN_GETINFOTIP notification.
TVS_FULLROWSELECT|0x00001000|Enables full-row selection in the tree view. The entire row of the selected item is highlighted, and clicking anywhere on an item's row causes it to be selected. This style cannot be used in conjunction with the TVS_HASLINES style.
TVS_NOSCROLL|0x00002000|Disables both horizontal and vertical scrolling in the control. The control will not display any scroll bars.
TVS_NONEVENHEIGHT|0x00004000|Sets the height of the items to an odd height with the TVM_SETITEMHEIGHT message. By default, the height of items must be an even value.
TVS_NOHSCROLL|0x00008000|Disables horizontal scrolling in the control. The control will not display any horizontal scroll bars.

[SysTreeView32Ex]
TVS_EX_NOSINGLECOLLAPSE|0x00000001|Intended for internal use; not recommended for use in applications. Do not collapse the previously selected tree-view item unless it has the same parent as the new selection. This style must be used with the TVS_SINGLEEXPAND style.
TVS_EX_MULTISELECT|0x00000002|Not supported. Do not use.
TVS_EX_DOUBLEBUFFER|0x00000004|Specifies how the background is erased or filled.
TVS_EX_NOINDENTSTATE|0x00000008|Do not indent the tree view for the expando buttons.
TVS_EX_RICHTOOLTIP|0x00000010|Allow rich tooltips in the tree view (custom drawn with icon and text).
TVS_EX_AUTOHSCROLL|0x00000020|Remove the horizontal scroll bar and auto-scroll depending on mouse position.
TVS_EX_FADEINOUTEXPANDOS|0x00000040|Fade expando buttons in or out when the mouse moves away or into a state of hovering over the control.
TVS_EX_PARTIALCHECKBOXES|0x00000080|Include partial checkbox state if the control has the TVS_CHECKBOXES style.
TVS_EX_EXCLUSIONCHECKBOXES|0x00000100|Include exclusion checkbox state if the control has the TVS_CHECKBOXES style.
TVS_EX_DIMMEDCHECKBOXES|0x00000200|Include dimmed checkbox state if the control has the TVS_CHECKBOXES style.
TVS_EX_DRAWIMAGEASYNC|0x00000400|Retrieves calendar grid information.

[msctls_statusbar32]
SBARS_SIZEGRIP|0x00000100|The status bar control will include a sizing grip at the right end of the status bar. A sizing grip is similar to a sizing border; it is a rectangular area that the user can click and drag to resize the parent window.
SBARS_TOOLTIPS|0x00000800|Use this style to enable tooltips.

[SysLink]
LWS_TRANSPARENT|0x00000001|The background mix mode is transparent.
LWS_IGNORERETURN|0x00000002|When the link has keyboard focus and the user presses Enter, the keystroke is ignored by the control and passed to the host dialog box.
LWS_NOPREFIX|0x00000004|Windows Vista. If the text contains an ampersand, it is treated as a literal character rather than the prefix to a shortcut key.
LWS_USEVISUALSTYLE|0x00000008|Windows Vista. The link is displayed in the current visual style.
LWS_USECUSTOMTEXT|0x00000010|Windows Vista. An NM_CUSTOMTEXT notification is sent when the control is drawn, so that the application can supply text dynamically.
LWS_RIGHT|0x00000020|Windows Vista. The text is right-justified.

[msctls_trackbar32]
TBS_HORZ|0x00000000|The trackbar control is oriented horizontally. This is the default orientation.
TBS_BOTTOM|0x00000000|The trackbar control displays tick marks below the control. This style is valid only with TBS_HORZ.
TBS_RIGHT|0x00000000|The trackbar control displays tick marks to the right of the control. This style is valid only with TBS_VERT.
TBS_AUTOTICKS|0x00000001|The trackbar control has a tick mark for each increment in its range of values.
TBS_VERT|0x00000002|The trackbar control is oriented vertically.
TBS_TOP|0x00000004|The trackbar control displays tick marks above the control. This style is valid only with TBS_HORZ.
TBS_LEFT|0x00000004|The trackbar control displays tick marks to the left of the control. This style is valid only with TBS_VERT.
TBS_BOTH|0x00000008|The trackbar control displays tick marks on both sides of the control. This will be both top and bottom when used with TBS_HORZ or both left and right if used with TBS_VERT.
TBS_NOTICKS|0x00000010|The trackbar control does not display any tick marks.
TBS_ENABLESELRANGE|0x00000020|The trackbar control displays a selection range only. The tick marks at the starting and ending positions of a selection range are displayed as triangles (instead of vertical dashes), and the selection range is highlighted.
TBS_FIXEDLENGTH|0x00000040|The trackbar control allows the size of the slider to be changed with the TBM_SETTHUMBLENGTH message.
TBS_NOTHUMB|0x00000080|The trackbar control does not display a slider.
TBS_TOOLTIPS|0x00000100|The trackbar control supports tooltips. When a trackbar control is created using this style, it automatically creates a default tooltip control that displays the slider's current position. You can change where the tooltips are displayed by using the TBM_SETTIPSIDE message.
TBS_REVERSED|0x00000200|This style bit is used for "reversed" trackbars, where a smaller number indicates "higher" and a larger number indicates "lower." It has no effect on the control; it is simply a label that can be checked to determine whether a trackbar is normal or reversed.
TBS_DOWNISLEFT|0x400|By default, the trackbar control uses down equal to right and up equal to left. Use the TBS_DOWNISLEFT style to reverse the default, making down equal left and up equal right.
TBS_NOTIFYBEFOREMOVE|0x800|Trackbar should notify parent before repositioning the slider due to user action (enables snapping).
TBS_TRANSPARENTBKGND|0x1000|Background is painted by the parent via the WM_PRINTCLIENT message.

[msctls_updown32]
UDS_WRAP|0x00000001|Causes the position to "wrap" if it is incremented or decremented beyond the ending or beginning of the range.
UDS_SETBUDDYINT|0x00000002|Causes the up-down control to set the text of the buddy window (using the WM_SETTEXT message) when the position changes. The text consists of the position formatted as a decimal or hexadecimal string.
UDS_ALIGNRIGHT|0x00000004|Positions the up-down control next to the right edge of the buddy window. The width of the buddy window is decreased to accommodate the width of the up-down control.
UDS_ALIGNLEFT|0x00000008|Positions the up-down control next to the left edge of the buddy window. The buddy window is moved to the right, and its width is decreased to accommodate the width of the up-down control.
UDS_AUTOBUDDY|0x00000010|Automatically selects the previous window in the z-order as the up-down control's buddy window.
UDS_ARROWKEYS|0x00000020|Causes the up-down control to increment and decrement the position when the UP ARROW and DOWN ARROW keys are pressed.
UDS_HORZ|0x00000040|Causes the up-down control's arrows to point left and right instead of up and down.
UDS_NOTHOUSANDS|0x00000080|Does not insert a thousands separator between every three decimal digits.
UDS_HOTTRACK|0x00000100|Causes the control to exhibit "hot tracking" behavior. That is, it highlights the UP ARROW and DOWN ARROW on the control as the pointer passes over them. This style requires Windows 98 or Windows 2000. If the system is running Windows 95 or Windows NT 4.0, the flag is ignored. To check whether hot tracking is enabled, call SystemParametersInfo.

[msctls_progress32]
PBS_SMOOTH|0x00000001|The progress bar displays progress status in a smooth scrolling bar instead of the default segmented bar.\n\nNote: This style is supported only in the Windows Classic theme. All other themes override this style.
PBS_VERTICAL|0x00000004|The progress bar displays progress status vertically, from bottom to top.
PBS_MARQUEE|0x00000008|The progress indicator does not grow in size but instead moves repeatedly along the length of the bar, indicating activity without specifying what proportion of the progress is complete.
PBS_SMOOTHREVERSE|0x00000010|Windows Vista. Determines the animation behavior that the progress bar should use when moving backward (from a higher value to a lower value). If this is set, then a "smooth" transition will occur, otherwise the control will "jump" to the lower value.

[SysTabControl32]
TCS_SINGLELINE|0x00000000|Only one row of tabs is displayed. The user can scroll to see more tabs, if necessary. This style is the default.
TCS_TABS|0x00000000|Tabs appear as tabs, and a border is drawn around the display area. This style is the default.
TCS_RIGHTJUSTIFY|0x00000000|The width of each tab is increased, if necessary, so that each row of tabs fills the entire width of the tab control. This window style is ignored unless the TCS_MULTILINE style is also specified.
TCS_SCROLLOPPOSITE|0x00000001|Unneeded tabs scroll to the opposite side of the control when a tab is selected.
TCS_BOTTOM|0x00000002|Tabs appear at the bottom of the control. This value equals TCS_RIGHT.
TCS_MULTISELECT|0x00000004|Multiple tabs can be selected by holding down the CTRL key when clicking. This style must be used with the TCS_BUTTONS style.
TCS_FLATBUTTONS|0x00000008|Selected tabs appear as being indented into the background while other tabs appear as being on the same plane as the background. This style only affects tab controls with the TCS_BUTTONS style.
TCS_FORCEICONLEFT|0x00000010|Icons are aligned with the left edge of each fixed-width tab. This style can only be used with the TCS_FIXEDWIDTH style.
TCS_FORCELABELLEFT|0x00000020|Labels are aligned with the left edge of each fixed-width tab; that is, the label is displayed immediately to the right of the icon instead of being centered. This style can only be used with the TCS_FIXEDWIDTH style, and it implies the TCS_FORCEICONLEFT style.
TCS_HOTTRACK|0x00000040|Items under the pointer are automatically highlighted. You can check whether hot tracking is enabled by calling SystemParametersInfo.
TCS_VERTICAL|0x00000080|Tabs appear at the left side of the control, with tab text displayed vertically. This style is valid only when used with the TCS_MULTILINE style. To make tabs appear on the right side of the control, also use the TCS_RIGHT style.
TCS_BUTTONS|0x00000100|Tabs appear as buttons, and no border is drawn around the display area.
TCS_MULTILINE|0x00000200|Multiple rows of tabs are displayed, if necessary, so all tabs are visible at once.
TCS_FIXEDWIDTH|0x00000400|All tabs are the same width. This style cannot be combined with the TCS_RIGHTJUSTIFY style.
TCS_RAGGEDRIGHT|0x00000800|Rows of tabs will not be stretched to fill the entire width of the control. This style is the default.
TCS_FOCUSONBUTTONDOWN|0x00001000|The tab control receives the input focus when clicked.
TCS_OWNERDRAWFIXED|0x00002000|The parent window is responsible for drawing tabs.
TCS_TOOLTIPS|0x00004000|The tab control has a tooltip control associated with it.
TCS_FOCUSNEVER|0x00008000|The tab control does not receive the input focus when clicked.

[SysTabControl32Ex]
TCS_EX_FLATSEPARATORS|0x00000001|The tab control will draw separators between the tab items. This extended style only affects tab controls that have the TCS_BUTTONS and TCS_FLATBUTTONS styles. By default, creating the tab control with the TCS_FLATBUTTONS style sets this extended style. If you do not require separators, you should remove this extended style after creating the control.
TCS_EX_REGISTERDROP|0x00000002|The tab control generates TCN_GETOBJECT notification codes to request a drop target object when an object is dragged over the tab items in the control. The application must call CoInitialize or OleInitialize before setting this style.

[SysMonthCal32]
MCS_DAYSTATE|0x00000001|The month calendar sends MCN_GETDAYSTATE notifications to request information about which days should be displayed in bold.
MCS_MULTISELECT|0x00000002|The month calendar enables the user to select a range of dates within the control. By default, the maximum range is one week. You can change the maximum range that can be selected by using the MCM_SETMAXSELCOUNT message.
MCS_WEEKNUMBERS|0x00000004|The month calendar control displays week numbers (1-52) to the left of each row of days. Week 1 is defined as the first week that contains at least four days.
MCS_NOTODAYCIRCLE|0x00000008|The month calendar control does not circle the "today" date.
MCS_NOTODAY|0x00000010|The month calendar control does not display the "today" date at the bottom of the control.
MCS_NOTRAILINGDATES|0x00000040|Dates from the previous and next months are not displayed in the current month's calendar.
MCS_SHORTDAYSOFWEEK|0x00000080|Short day names are displayed in the header.
MCS_NOSELCHANGEONNAV|0x00000100|The selection is not changed when the user navigates next or previous in the calendar. This allows the user to select a range larger than is visible.

[SysDateTimePick32]
DTS_SHORTDATEFORMAT|0x00000000|Displays the date in short format. The default format string for this style is defined by LOCALE_SSHORTDATE, which produces output like "4/19/96".
DTS_UPDOWN|0x00000001|Places an up-down control to the right of the DTP control to modify date-time values. This style can be used in place of the drop-down month calendar, which is the default style.
DTS_SHOWNONE|0x00000002|It is possible to have no date currently selected in the control. With this style, the control displays a check box that is automatically selected whenever a date is picked or entered. If the check box is subsequently deselected, the application cannot retrieve the date from the control because, in essence, the control has no date. The state of the check box can be set with the DTM_SETSYSTEMTIME message or queried with the DTM_GETSYSTEMTIME message.
DTS_LONGDATEFORMAT|0x00000004|Displays the date in long format. The default format string for this style is defined by LOCALE_SLONGDATEFORMAT, which produces output like "Friday, April 19, 1996". When this style is used, the dropdown button does not display an icon.
DTS_SHORTDATECENTURYFORMAT|0x0000000C|Similar to the DTS_SHORTDATEFORMAT style, except the year is a four-digit field. The default format string for this style is based on LOCALE_SSHORTDATE. The output looks like: "4/19/1996".
DTS_TIMEFORMAT|0x00000009|Displays the time. The default format string for this style is defined by LOCALE_STIMEFORMAT, which produces output like "5:31:42 PM".
DTS_APPCANPARSE|0x00000010|Allows the owner to parse user input and take necessary action. It enables users to edit within the client area of the control when they press the F2 key. The control sends DTN_USERSTRING notification codes when users are finished.
DTS_RIGHTALIGN|0x00000020|The drop-down month calendar will be right-aligned with the control instead of left-aligned, which is the default.

[ToolbarWindow32]
TBSTYLE_TOOLTIPS|0x00000100|Creates a tooltip control that an application can use to display descriptive text for the buttons in the toolbar.
TBSTYLE_WRAPABLE|0x00000200|Creates a toolbar that can have multiple lines of buttons. Toolbar buttons can "wrap" to the next line when the toolbar becomes too narrow to include all buttons on the same line. When the toolbar is wrapped, the break will occur on either the rightmost separator or the rightmost button if there are no separators on the bar. This style must be set to display a vertical toolbar control when the toolbar is part of a vertical rebar control. This style cannot be combined with CCS_VERT.
TBSTYLE_ALTDRAG|0x00000400|Allows users to change a toolbar button's position by dragging it while holding down the ALT key. If this style is not specified, the user must hold down the SHIFT key while dragging a button. Note that the CCS_ADJUSTABLE style must be specified to enable toolbar buttons to be dragged.
TBSTYLE_FLAT|0x00000800|Creates a flat toolbar. In a flat toolbar, both the toolbar and the buttons are transparent and hot-tracking is enabled. Button text appears under button bitmaps. To prevent repainting problems, this style should be set before the toolbar control becomes visible.
TBSTYLE_LIST|0x00001000|Creates a flat toolbar with button text to the right of the bitmap. Otherwise, this style is identical to TBSTYLE_FLAT. To prevent repainting problems, this style should be set before the toolbar control becomes visible.
TBSTYLE_CUSTOMERASE|0x00002000|Generates NM_CUSTOMDRAW notification codes when the toolbar processes WM_ERASEBKGND messages.
TBSTYLE_REGISTERDROP|0x00004000|Generates TBN_GETOBJECT notification codes to request drop target objects when the cursor passes over toolbar buttons.
TBSTYLE_TRANSPARENT|0x00008000|Creates a transparent toolbar. In a transparent toolbar, the toolbar is transparent but the buttons are not. Button text appears under button bitmaps. To prevent repainting problems, this style should be set before the toolbar control becomes visible.

[ToolbarWindow32Ex]
TBSTYLE_EX_DRAWDDARROWS|0x00000001|This style allows buttons to have a separate dropdown arrow. Buttons that have the BTNS_DROPDOWN style will be drawn with a dropdown arrow in a separate section, to the right of the button. If the arrow is clicked, only the arrow portion of the button will depress, and the toolbar control will send a TBN_DROPDOWN notification code to prompt the application to display the dropdown menu. If the main part of the button is clicked, the toolbar control sends a WM_COMMAND message with the button's ID. The application normally responds by launching the first command on the menu.\n\nThere are many situations where you may want to have only some of the dropdown buttons on a toolbar with separated arrows. To do so, set the TBSTYLE_EX_DRAWDDARROWS extended style. Give those buttons that will not have separated arrows the BTNS_WHOLEDROPDOWN style. Buttons with this style will have an arrow displayed next to the image. However, the arrow will not be separate and when any part of the button is clicked, the toolbar control will send a TBN_DROPDOWN notification code. To prevent repainting problems, this style should be set before the toolbar control becomes visible.
TBSTYLE_EX_MULTICOLUMN|0x00000002|Intended for internal use; not recommended for use in applications. This style gives the toolbar a vertical orientation and organizes the toolbar buttons into columns. The buttons flow down vertically until a button has exceeded the bounding height of the toolbar (see TB_SETBOUNDINGSIZE), and then a new column is created. The toolbar flows the buttons in this manner until all buttons are positioned. To use this style, the TBSTYLE_EX_VERTICAL style must also be set.
TBSTYLE_EX_VERTICAL|0x00000004|Intended for internal use; not recommended for use in applications. This style gives the toolbar a vertical orientation. Toolbar buttons flow from top to bottom instead of horizontally.
TBSTYLE_EX_MIXEDBUTTONS|0x00000008|This style allows you to set text for all buttons, but only display it for those buttons with the BTNS_SHOWTEXT button style. The TBSTYLE_LIST style must also be set. Normally, when a button does not display text, your application must handle TBN_GETINFOTIP or TTN_GETDISPINFO to display a tooltip. With the TBSTYLE_EX_MIXEDBUTTONS extended style, text that is set but not displayed on a button will automatically be used as the button's tooltip text. Your application only needs to handle TBN_GETINFOTIP or or TTN_GETDISPINFO if it needs more flexibility in specifying the tooltip text.
TBSTYLE_EX_HIDECLIPPEDBUTTONS|0x00000010|This style hides partially clipped buttons. The most common use of this style is for toolbars that are part of a rebar control. If an adjacent band covers part of a button, the button will not be displayed. However, if the rebar band has the RBBS_USECHEVRON style, the button will be displayed on the chevron's dropdown menu.
TBSTYLE_EX_DOUBLEBUFFER|0x00000080|This style requires the toolbar to be double buffered. Double buffering is a mechanism that detects when the toolbar has changed.

[RebarWindow32]
RBS_TOOLTIPS|0x00000100|Not yet supported.
RBS_VARHEIGHT|0x00000200|The rebar control displays bands at the minimum required height, when possible. Without this style, the rebar control displays all bands at the same height, using the height of the tallest visible band to determine the height of other bands.
RBS_BANDBORDERS|0x00000400|The rebar control displays narrow lines to separate adjacent bands.
RBS_FIXEDORDER|0x00000800|The rebar control always displays bands in the same order. You can move bands to different rows, but the band order is static.
RBS_REGISTERDROP|0x00001000|The rebar control generates RBN_GETOBJECT notification codes when an object is dragged over a band in the control. To receive the RBN_GETOBJECT notifications, initialize OLE with a call to OleInitialize or CoInitialize.
RBS_AUTOSIZE|0x00002000|The rebar control will automatically change the layout of the bands when the size or position of the control changes. An RBN_AUTOSIZE notification will be sent when this occurs.
RBS_VERTICALGRIPPER|0x00004000|The size grip will be displayed vertically instead of horizontally in a vertical rebar control. This style is ignored for rebar controls that do not have the CCS_VERT style.
RBS_DBLCLKTOGGLE|0x00008000|The size grip will be displayed vertically instead of horizontally in a vertical rebar control. This style is ignored for rebar controls that do not have the CCS_VERT style.

[ScrollBar]
SBS_HORZ|0x00000000|Designates a horizontal scroll bar. If neither the SBS_BOTTOMALIGN nor SBS_TOPALIGN style is specified, the scroll bar has the height, width, and position specified by the x, y, nWidth, and nHeight parameters of CreateWindowEx.
SBS_VERT|0x00000001|Designates a vertical scroll bar. If you specify neither the SBS_RIGHTALIGN nor the SBS_LEFTALIGN style, the scroll bar has the height, width, and position specified by the x, y, nWidth, and nHeight parameters of CreateWindowEx.
SBS_TOPALIGN|0x00000002|Aligns the top edge of the scroll bar with the top edge of the rectangle defined by the x, y, nWidth, and nHeight parameters of CreateWindowEx. The scroll bar has the default height for system scroll bars. Use this style with the SBS_HORZ style.
SBS_LEFTALIGN|0x00000002|Aligns the left edge of the scroll bar with the left edge of the rectangle defined by the x, y, nWidth, and nHeight parameters of CreateWindowEx. The scroll bar has the default width for system scroll bars. Use this style with the SBS_VERT style.
SBS_SIZEBOXTOPLEFTALIGN|0x00000002|Aligns the upper left corner of the size box with the upper left corner of the rectangle specified by the x, y, nWidth, and nHeight parameters of CreateWindowEx. The size box has the default size for system size boxes. Use this style with the SBS_SIZEBOX style.
SBS_BOTTOMALIGN|0x00000004|Aligns the bottom edge of the scroll bar with the bottom edge of the rectangle defined by the x, y, nWidth, and nHeight parameters of CreateWindowEx function. The scroll bar has the default height for system scroll bars. Use this style with the SBS_HORZ style.
SBS_RIGHTALIGN|0x00000004|Aligns the right edge of the scroll bar with the right edge of the rectangle defined by the x, y, nWidth, and nHeight parameters of CreateWindowEx. The scroll bar has the default width for system scroll bars. Use this style with the SBS_VERT style.
SBS_SIZEBOXBOTTOMRIGHTALIGN|0x00000004|Aligns the lower right corner of the size box with the lower right corner of the rectangle specified by the x, y, nWidth, and nHeight parameters of CreateWindowEx. The size box has the default size for system size boxes. Use this style with the SBS_SIZEBOX style.
SBS_SIZEBOX|0x00000008|Designates a size box. If you specify neither the SBS_SIZEBOXBOTTOMRIGHTALIGN nor the SBS_SIZEBOXTOPLEFTALIGN style, the size box has the height, width, and position specified by the x, y, nWidth, and nHeight parameters of CreateWindowEx.
SBS_SIZEGRIP|0x00000010|Same as SBS_SIZEBOX, but with a raised edge.

[SysPager]
PGS_VERT|0x00000000|Creates a pager control that can be scrolled vertically. This is the default direction if no direction style is specified. This style and the PGS_HORZ style are mutually exclusive and cannot be combined.
PGS_HORZ|0x00000001|Creates a pager control that can be scrolled horizontally. This style and the PGS_VERT style are mutually exclusive and cannot be combined.
PGS_AUTOSCROLL|0x00000002|The pager control will scroll when the user hovers the mouse over one of the scroll buttons.
PGS_DRAGNDROP|0x00000004|The contained window can be a drag-and-drop target. The pager control will automatically scroll if an item is dragged from outside the pager over one of the scroll buttons.

[SysAnimate]
ACS_CENTER|0x00000001|Centers the animation in the animation control's window.
ACS_TRANSPARENT|0x00000002|Allows you to match an animation's background color to that of the underlying window, creating a "transparent" background. The parent of the animation control must not have the WS_CLIPCHILDREN style (see Window Styles). The control sends a WM_CTLCOLORSTATIC message to its parent. Use SetBkColor to set the background color for the device context to an appropriate value. The control interprets the upper-left pixel of the first frame as the animation's default background color. It will remap all pixels with that color to the value you supplied in response to WM_CTLCOLORSTATIC.
ACS_AUTOPLAY|0x00000004|Starts playing the animation as soon as the AVI clip is opened.
ACS_TIMER|0x00000008|By default, the control creates a thread to play the AVI clip. If you set this flag, the control plays the clip without creating a thread; internally the control uses a Win32 timer to synchronize playback.\n\nComctl32.dll version 6 and later: This style is not supported. By default, the control plays the AVI clip without creating a thread.

[ComboBoxExEx]
CBES_EX_NOEDITIMAGE|0x00000001|The edit box and the dropdown list will not display item images.
CBES_EX_NOEDITIMAGEINDENT|0x00000002|The edit box and the dropdown list will not display item images.
CBES_EX_PATHWORDBREAKPROC|0x00000004|Windows NT only. The edit box will use the slash (/), backslash (\), and period (.) characters as word delimiters. This makes keyboard shortcuts for word-by-word cursor movement effective in path names and URLs.
CBES_EX_NOSIZELIMIT|0x00000008|Allows the ComboBoxEx control to be vertically sized smaller than its contained combo box control. If the ComboBoxEx is sized smaller than the combo box, the combo box will be clipped.
CBES_EX_CASESENSITIVE|0x00000010|BSTR searches in the list will be case sensitive. This includes searches as a result of text being typed in the edit box and the CB_FINDSTRINGEXACT message.
CBES_EX_TEXTENDELLIPSIS|0x00000020|Causes items in the drop-down list and the edit box (when the edit box is read only) to be truncated with an ellipsis ("...") rather than just clipped by the edge of the control. This is useful when the control needs to be set to a fixed width, yet the entries in the list may be long.

[#32770]
DS_3DLOOK|0x00000004|Obsolete. The system automatically applies the three-dimensional look to dialog boxes created by applications.
DS_ABSALIGN|0x00000001|Indicates that the coordinates of the dialog box are screen coordinates. If this style is not specified, the coordinates are client coordinates.
DS_CENTER|0x00000800|Centers the dialog box in the working area of the monitor that contains the owner window. If no owner window is specified, the dialog box is centered in the working area of a monitor determined by the system. The working area is the area not obscured by the taskbar or any appbars.
DS_CENTERMOUSE|0x00001000|Centers the dialog box on the mouse cursor.
DS_CONTEXTHELP|0x00002000|Includes a question mark in the title bar of the dialog box. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a control in the dialog box, the control receives a WM_HELP message. The control should pass the message to the dialog box procedure, which should call the function using the HELP_WM_HELP command. The help application displays a pop-up window that typically contains help for the control.\n\nNote that DS_CONTEXTHELP is only a placeholder. When the dialog box is created, the system checks for DS_CONTEXTHELP and, if it is there, adds WS_EX_CONTEXTHELP to the extended style of the dialog box. WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
DS_CONTROL|0x00000400|Creates a dialog box that works well as a child window of another dialog box, much like a page in a property sheet. This style allows the user to tab among the control windows of a child dialog box, use its accelerator keys, and so on.
DS_FIXEDSYS|0x00000008|Causes the dialog box to use the SYSTEM_FIXED_FONT instead of the default SYSTEM_FONT. This is a monospace font compatible with the System font in 16-bit versions of Windows earlier than 3.0.
DS_LOCALEDIT|0x00000020|Applies to 16-bit applications only. This style directs edit controls in the dialog box to allocate memory from the application's data segment. Otherwise, edit controls allocate storage from a global memory object.
DS_MODALFRAME|0x00000080|Creates a dialog box with a modal dialog-box frame that can be combined with a title bar and window menu by specifying the WS_CAPTION and WS_SYSMENU styles.
DS_NOFAILCREATE|0x00000010|Creates the dialog box even if errors occur - for example, if a child window cannot be created or if the system cannot create a special data segment for an edit control.
DS_NOIDLEMSG|0x00000100|Suppresses WM_ENTERIDLE messages that the system would otherwise send to the owner of the dialog box while the dialog box is displayed.
DS_SETFONT|0x00000040|Indicates that the header of the dialog box template (either standard or extended) contains additional data specifying the font to use for text in the client area and controls of the dialog box. If possible, the system selects a font according to the specified font data. The system passes a handle to the font to the dialog box and to each control by sending them the WM_SETFONT message. For descriptions of the format of this font data, see DLGTEMPLATE and DLGTEMPLATEEX.\n\nIf neither DS_SETFONT nor DS_SHELLFONT is specified, the dialog box template does not include the font data.
DS_SETFOREGROUND|0x00000200|Causes the system to use the SetForegroundWindow function to bring the dialog box to the foreground. This style is useful for modal dialog boxes that require immediate attention from the user regardless of whether the owner window is the foreground window.\n\nThe system restricts which processes can set the foreground window. For more information, see Foreground and Background Windows.
DS_SHELLFONT|0x00000048|Indicates that the dialog box should use the system font. The typeface member of the extended dialog box template must be set to MS Shell Dlg. Otherwise, this style has no effect. It is also recommended that you use the DIALOGEX Resource, rather than the DIALOG Resource. For more information, see Dialog Box Fonts.\n\nThe system selects a font using the font data specified in the pointsize, weight, and italic members. The system passes a handle to the font to the dialog box and to each control by sending them the WM_SETFONT message. For descriptions of the format of this font data, see DLGTEMPLATEEX.\n\nIf neither DS_SHELLFONT nor DS_SETFONT is specified, the extended dialog box template does not include the font data.
DS_SYSMODAL|0x00000002|This style is obsolete and is included for compatibility with 16-bit versions of Windows. If you specify this style, the system creates the dialog box with the WS_EX_TOPMOST style. This style does not prevent the user from accessing other windows on the desktop.\n\nDo not combine this style with the DS_CONTROL style.

[CommonControls]
CCS_TOP|0x00000001|Causes the control to position itself at the top of the parent window's client area and sets the width to be the same as the parent window's width. Toolbars have this style by default. 
CCS_NOMOVEY|0x00000002|Causes the control to resize and move itself horizontally, but not vertically, in response to a WM_SIZE message. If CCS_NORESIZE is used, this style does not apply. Header windows have this style by default.
CCS_BOTTOM|0x00000003|Causes the control to position itself at the bottom of the parent window's client area and sets the width to be the same as the parent window's width. Status windows have this style by default.
CCS_NORESIZE|0x00000004|Prevents the control from using the default width and height when setting its initial size or a new size. Instead, the control uses the width and height specified in the request for creation or sizing. 
CCS_NOPARENTALIGN|0x00000008|Prevents the control from automatically moving to the top or bottom of the parent window. Instead, the control keeps its position within the parent window despite changes to the size of the parent. If CCS_TOP or CCS_BOTTOM is also used, the height is adjusted to the default, but the position and width remain unchanged. 
CCS_ADJUSTABLE|0x00000020|Enables a toolbar's built-in customization features, which let the user to drag a button to a new position or to remove a button by dragging it off the toolbar. In addition, the user can double-click the toolbar to display the Customize Toolbar dialog box, which enables the user to add, delete, and rearrange toolbar buttons.
CCS_NODIVIDER|0x00000040|Prevents a two-pixel highlight from being drawn at the top of the control. 
CCS_VERT|0x00000080|Causes the control to be displayed vertically.
CCS_LEFT|0x00000081|Causes the control to be displayed vertically on the left side of the parent window.
CCS_NOMOVEX|0x00000082|Causes the control to resize and move itself vertically, but not horizontally, in response to a WM_SIZE message. If CCS_NORESIZE is used, this style does not apply.
CCS_RIGHT|0x00000083|Causes the control to be displayed vertically on the right side of the parent window.

[SysHeader32]
HDS_HORZ|0x00000000|Creates a header control with a horizontal orientation. 
HDS_BUTTONS|0x00000002|Each item in the control looks and behaves like a push button. This style is useful if an application carries out a task when the user clicks an item in the header control. For example, an application could sort information in the columns differently depending on which item the user clicks.
HDS_HOTTRACK|0x00000004|Enables hot tracking.
HDS_HIDDEN|0x00000008|Indicates a header control that is intended to be hidden. This style does not hide the control. Instead, when you send the HDM_LAYOUT message to a header control with the HDS_HIDDEN style, the control returns zero in the cy member of the WINDOWPOS structure. You would then hide the control by setting its height to zero. This can be useful when you want to use the control as an information container instead of a visual control.
HDS_DRAGDROP|0x00000040|Allows drag-and-drop reordering of header items.
HDS_FULLDRAG|0x00000080|Causes the header control to display column contents even while the user resizes a column.
HDS_FILTERBAR|0x00000100|Include a filter bar as part of the standard header control. This bar allows users to conveniently apply a filter to the display. Calls to HDM_LAYOUT will yield a new size for the control and cause the list view to update.
HDS_FLAT|0x00000200|Causes the header control to be drawn flat when the operating system is running in classic mode.
HDS_CHECKBOXES|0x00000400|Allows the placing of checkboxes on header items. For more information, see the fmt member of HDITEM.
HDS_NOSIZING|0x00000800|The user cannot drag the divider on the header control.
HDS_OVERFLOW|0x00001000|A button is displayed when not all items can be displayed within the header control's rectangle. When clicked, this button sends an HDN_OVERFLOWCLICK notification.

[tooltips_class32]
TTS_ALWAYSTIP|0x00000001|Indicates that the tooltip control appears when the cursor is on a tool, even if the tooltip control's owner window is inactive. Without this style, the tooltip appears only when the tool's owner window is active.
TTS_NOPREFIX|0x00000002|Prevents the system from stripping ampersand characters from a string or terminating a string at a tab character. Without this style, the system automatically strips ampersand characters and terminates a string at the first tab character. This allows an application to use the same string as both a menu item and as text in a tooltip control.
TTS_NOANIMATE|0x00000010|Disables sliding tooltip animation on Windows 98 and Windows 2000 systems. This style is ignored on earlier systems.
TTS_NOFADE|0x00000020|Disables fading tooltip animation. 
TTS_BALLOON|0x00000040|Indicates that the tooltip control has the appearance of a cartoon "balloon," with rounded corners and a stem pointing to the item.
TTS_CLOSE|0x00000080|Displays a Close button on the tooltip. Valid only when the tooltip has the TTS_BALLOON style and a title; see TTM_SETTITLE.
TTS_USEVISUALSTYLE|0x00000100|Uses themed hyperlinks. The theme will define the styles for any links in the tooltip. This style always requires TTF_PARSELINKS to be set.

[RICHEDIT50W]
ES_SAVESEL|0x00008000|Preserves the selection when the control loses the focus. By default, the entire contents of the control are selected when it regains the focus.
ES_SUNKEN|0x00004000|Displays the control with a sunken border style so that the rich edit control appears recessed into its parent window.
ES_DISABLENOSCROLL|0x00002000|Disables scroll bars instead of hiding them when they are not needed.
ES_SELECTIONBAR|0x01000000|Adds space to the left margin where the cursor changes to a right-up arrow, allowing the user to select full lines of text.
ES_NOOLEDRAGDROP|0x00000008|Disables support for drag-drop of OLE objects.
ES_EX_NOCALLOLEINIT|0x00000000|Obsolete. Prevents the control from calling the OleInitialize function when created. This window style is useful only in dialog templates because CreateWindowEx does not accept this style.
ES_VERTICAL|0x00400000|Draws text and objects in a vertical direction. This style is available for Asian-language support only.
ES_NOIME|0x00080000|Disables the IME operation. This style is available for Asian language support only.
ES_SELFIME|0x00040000|Directs the rich edit control to allow the application to handle all IME operations. This style is available for Asian language support only.
ES_AUTOHSCROLL|0x00000080|Automatically scrolls text to the right by 10 characters when the user types a character at the end of the line. When the user presses the ENTER key, the control scrolls all text back to position zero.
ES_AUTOVSCROLL|0x00000040|Automatically scrolls text up one page when the user presses the ENTER key on the last line.
ES_CENTER|0x00000001|Centers text in a single-line or multiline edit control.
ES_LEFT|0x00000000|Left aligns text.
ES_MULTILINE|0x00000004|Designates a multiline edit control. The default is single-line edit control.
ES_NOHIDESEL|0x00000100|Negates the default behavior for an edit control. The default behavior hides the selection when the control loses the input focus and inverts the selection when the control receives the input focus. If you specify ES_NOHIDESEL, the selected text is inverted, even if the control does not have the focus.
ES_NUMBER|0x00002000|Allows only digits to be entered into the edit control.
ES_PASSWORD|0x00000020|Displays an asterisk (*) for each character typed into the edit control. This style is valid only for single-line edit controls.
ES_READONLY|0x00000800|Prevents the user from typing or editing text in the edit control.
ES_RIGHT|0x00000002|Right aligns text in a single-line or multiline edit control.
ES_WANTRETURN|0x00001000|Specifies that a carriage return be inserted when the user presses the ENTER key while entering text into a multiline edit control in a dialog box. If you do not specify this style, pressing the ENTER key has the same effect as pressing the dialog box's default push button. This style has no effect on a single-line edit control.
